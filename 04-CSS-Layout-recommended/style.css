/* Use `*` to select every element */
* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Inherited properties is the lowest priority */
/* All the element will inherit text-related properties from `body` */
body {
  font-family: sans-serif;
  color: #444;

  /* Not all properties will be inherited, like border */
  border-top: 10px solid #1098ad;
}

/* Set the body to an assigned width */
/* Use auto to set the content in centre of the body*/
.container {
  /* set the width same to the image, and the image will fulfill the width */
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

/* list element*/
/* h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #444;
} */

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

/* Usually use margin-bottom for each element */
/* 
Collapsing margins: margin between `p` and `h3` has a margin-bottom of `p` and 
a margin-top of `h3`, and the margin will be the larger one, not the sum of the two
*/
h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  font-family: sans-serif;
  margin-bottom: 10px;
}

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

/* use # before `id` */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

/* use . before `class` */
.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0;
}

/* Two assigned values: the first stand for `top` and `bottom`, the second stand for `left` and `right` */
.main-header {
  background-color: #f7f7f7;
  /* background-color: red; */
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

.post-header {
  margin-bottom: 40px;
}

article {
  margin-bottom: 60px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 40px;
  /* change aside's content-box to border-box, cause the there's no space in width to hold it */
  /* usually we can move box-sizing to universal selector(*), but not for body selector, cause box-sizing will not get inherited */
  /* box-sizing: border-box; */
}

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
  margin-bottom: 0;
}

/* odd, even or number like 1, 2, 3... */
li:nth-child(even) {
  color: blueviolet;
}

/* Misconception: this won't work! cause p is not the first child of article */
article p:first-child {
  color: red;
}

/* Styling links: LVHA */
/* Use for anchor with link */
a:link {
  color: #1098ad;
  text-decoration: none;
}

/* Use for anchor of which the link has already been visited */
a:visited {
  color: rgb(168, 158, 96);
}

/* Use for anchor when the mouse is on it */
a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

/* Use for anchor when the mouse is clicking on it */
a:active {
  background-color: black;
  font-style: italic;
}

/* 
Image adapt: if the html file has given the `width` and `height` , then 
it can just assign one of the size, and give an `auto` to another, but 
if there is no size assigned in html file, then use xx% for one of size,
and it will scale adapt to the web windown size
*/
.post-img {
  width: 800px;
  /* width: 50%; */
  height: auto;
}
/* Solving conflicts */
/* Priority: id# > class.(or pseudo) > element > inherited */
/* But if there is a `!important` behind the `property` and it will be activated as the first priority */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.footer {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* Box types */
/* Transform block box to inline box */
.copyright {
  margin-left: 20px;
  margin-top: 100px;
  /* margin-top(bottom) is invalid in `inline` box, so the 100px disappears. */
  display: inline;
}

/* Transform inline box to block box */
.test-inline-to-block {
  margin-top: 30px;
  margin-left: 30px;
  /* margin-top(bottom) will be valid in `block` box, so the top 30px appears. */
  display: block;
}

/* Inline-block box will not break line like `inline` box, but can use all margins and paddings like `block` box */
/* Transform inline box to inline-block box */
nav a:link {
  margin-right: 30px;
  /* margin-top: 10px; */
  /* margin-top(bottom) will be valid in `inline-block` box, so the top 10px appears. */
  display: inline-block;
}
/* Usually, set the last one's right to zero */
nav a:link:last-child {
  margin-right: 0;
}
/* Image is inline-block box */
.post-img {
  /* 4 margins (t b l r) will all be valid */
  margin: 10px;
}

/* Pseudo element */
/* the first letter pseudo element to set the format of the first letter of h1 */
h1::first-letter {
  font-style: normal;
  margin-right: 10px;
}
/* the first line pseudo element: format the first line of each `p` */
/* and if use `h3 + ` before it, it will only format the `p`s taht adjacent sibling to all `h3` */
h3 + p::first-line {
  color: green;
}
/* Before or After pseudo element */
/* a after pseudo element fo `h2`, before pseudo element is the same of using */
/* use absolute positon, the parent position must be relative */
h2 {
  /* background-color: orange; */
  position: relative;
}
h2::after {
  content: "TOP";
  color: black;
  background-color: #ffe70e;
  font-size: 16px;
  font-weight: bold;
  /* inline-block will not break line, and can config the paddings and margins */
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  /* use negative to make the content out of `h2` box */
  top: -10px;
  right: -20px;
}

/* Button: absolute positioning test */
button {
  font-size: 22px;
  padding: 12px;
  cursor: pointer;

  position: absolute;

  /* position of the viewpoint: position of current visiable page(not whole page, not contain the rest of pull-down part) */
  bottom: 50px;
  right: 50px;

  /* position of the page (not the viewpoint): position of the whole page */
  /* set the parent element (`body` element or others parent element) `postion` as `relative`, and it will works */
  /* 
  always choose the closest relative-position parent: proximity principle
  the `button` is in element `post-header`, so `body`, `container` are also its' parent, but it will choose post-header
  as post-header is the closest parent, and if comment the `post-header` below, then it will choose `container`.
  */
}
/* .post-header {
  position: relative;
} */
.container {
  position: relative;
}
body {
  position: relative;
}

/* FLEXBOX LAYOUT */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0px;
  margin-left: 15px;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}

.related-link {
  font-size: 18px;
  font-weight: bold;
  font-style: normal;
  /* link是inline类型，要使用margin生效，必须将display修改为block类型 */
  margin-bottom: 5px;
  display: block;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.row {
  display: flex;
}

aside {
  flex: 0 0 300px;
}
